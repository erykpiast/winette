import { writeFileSync } from 'node:fs';
import { resolve } from 'node:path';
import openapiTS from 'openapi-typescript';
import ts from 'typescript';

const OPENAPI_SCHEMA_PATH = resolve('./src/backend/schema/openapi.json');
const OUTPUT_PATH = resolve('./src/frontend/types/api.ts');

console.log('Working directory:', process.cwd());
console.log('Schema path:', OPENAPI_SCHEMA_PATH);

async function generateApiTypes() {
  try {
    console.log('üîß Generating API types from OpenAPI schema...');

    // Generate TypeScript types from OpenAPI schema
    const result = await openapiTS(new URL(`file://${OPENAPI_SCHEMA_PATH}`));

    console.log('Result type:', typeof result);
    console.log('Is array:', Array.isArray(result));

    // In v7, openapiTS returns a TypeScript AST, we need to convert it to source code
    let outputString: string;

    if (typeof result === 'string') {
      outputString = result;
    } else if (Array.isArray(result)) {
      // This is a TypeScript AST - convert to source code
      const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
      const sourceFile = ts.createSourceFile('generated.ts', '', ts.ScriptTarget.Latest, true, ts.ScriptKind.TS);

      // Print each node in the AST
      const generatedCode = result
        .map((node: ts.Node) => printer.printNode(ts.EmitHint.Unspecified, node, sourceFile))
        .join('\n\n');

      outputString = generatedCode;
    } else {
      throw new Error('Unexpected result type from openapi-typescript');
    }

    // Add custom client types at the beginning
    const customTypes = `// Auto-generated API types from OpenAPI schema
// DO NOT EDIT - This file is automatically generated

export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  cached?: boolean;
  total?: number;
  hasMore?: boolean;
}

export interface ApiError {
  error: string;
  message: string;
  details?: Array<{
    field: string;
    message: string;
  }>;
}

export interface RateLimitError {
  error: string;
  message: string;
  retryAfter: number;
}

`;

    // Combine custom types with generated types
    const finalOutput = `${customTypes}\n${outputString}`;

    // Write the generated types to file
    writeFileSync(OUTPUT_PATH, finalOutput);

    console.log(`‚úÖ API types generated successfully at ${OUTPUT_PATH}`);
  } catch (error) {
    console.error('‚ùå Failed to generate API types:', error);
    process.exit(1);
  }
}

// Run the script
generateApiTypes();
