// Auto-generated API types from OpenAPI schema
// DO NOT EDIT - This file is automatically generated

export interface ApiResponse<T = unknown> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
  cached?: boolean;
  total?: number;
  hasMore?: boolean;
}

export interface ApiError {
  error: string;
  message: string;
  details?: Array<{
    field: string;
    message: string;
  }>;
}

export interface RateLimitError {
  error: string;
  message: string;
  retryAfter: number;
}

export interface paths {
  '/health': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Health check
     * @description Check if the API is running
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description API is healthy */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['HealthResponse'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/wine-labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get wine labels
     * @description Retrieve wine labels with optional filtering and pagination
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter by wine style */
          style?: components['schemas']['WineStyle'];
          /** @description Filter by region (partial match) */
          region?: string;
          /** @description Number of results to return */
          limit?: number;
          /** @description Number of results to skip */
          offset?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WineLabelsResponse'];
          };
        };
        /** @description Invalid query parameters */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
        /** @description Rate limit exceeded */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitResponse'];
          };
        };
      };
    };
    put?: never;
    /**
     * Create wine label
     * @description Create a new wine label
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['CreateWineLabelRequest'];
        };
      };
      responses: {
        /** @description Wine label created successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WineLabelResponse'];
          };
        };
        /** @description Invalid request data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ValidationErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/wine-labels/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get wine label by ID
     * @description Retrieve a specific wine label
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Wine label ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WineLabelResponse'];
          };
        };
        /** @description Wine label not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    /**
     * Update wine label
     * @description Update an existing wine label
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Wine label ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UpdateWineLabelRequest'];
        };
      };
      responses: {
        /** @description Wine label updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['WineLabelResponse'];
          };
        };
        /** @description Wine label not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    post?: never;
    /**
     * Delete wine label
     * @description Delete a wine label
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Wine label ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Wine label deleted successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SuccessResponse'];
          };
        };
        /** @description Wine label not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorResponse'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    WineStyle: 'red' | 'white' | 'ros√©' | 'sparkling' | 'dessert';
    WineLabel: {
      /** Format: uuid */
      id: string;
      name: string;
      winery: string;
      vintage: number;
      region: string;
      grape_variety: string;
      alcohol_content: number;
      tasting_notes: string;
      style: components['schemas']['WineStyle'];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    CreateWineLabelRequest: {
      name: string;
      winery: string;
      vintage: number;
      region: string;
      grape_variety: string;
      alcohol_content: number;
      tasting_notes: string;
      style: components['schemas']['WineStyle'];
    };
    UpdateWineLabelRequest: {
      name?: string;
      winery?: string;
      vintage?: number;
      region?: string;
      grape_variety?: string;
      alcohol_content?: number;
      tasting_notes?: string;
      style?: components['schemas']['WineStyle'];
    };
    HealthResponse: {
      /** @example ok */
      status: string;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      environment: 'development' | 'production' | 'test';
    };
    WineLabelsResponse: {
      success: boolean;
      data: components['schemas']['WineLabel'][];
      total: number;
      hasMore: boolean;
      cached: boolean;
    };
    WineLabelResponse: {
      success: boolean;
      data: components['schemas']['WineLabel'];
      cached?: boolean;
    };
    SuccessResponse: {
      success: boolean;
      message: string;
    };
    ErrorResponse: {
      error: string;
      message: string;
    };
    ValidationErrorResponse: {
      error: string;
      message: string;
      details: {
        field: string;
        message: string;
      }[];
    };
    RateLimitResponse: {
      error: string;
      message: string;
      retryAfter: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type operations = Record<string, never>;
